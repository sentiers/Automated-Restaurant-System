{"ast":null,"code":"'use strict';\n\nvar helpers = require('./helpers.core');\n/**\n * @namespace Chart.helpers.canvas\n */\n\n\nvar exports = module.exports = {\n  /**\n   * Clears the entire canvas associated to the given `chart`.\n   * @param {Chart} chart - The chart for which to clear the canvas.\n   */\n  clear: function (chart) {\n    chart.ctx.clearRect(0, 0, chart.width, chart.height);\n  },\n\n  /**\n   * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n   * given size (width, height) and the same `radius` for all corners.\n   * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n   * @param {Number} x - The x axis of the coordinate for the rectangle starting point.\n   * @param {Number} y - The y axis of the coordinate for the rectangle starting point.\n   * @param {Number} width - The rectangle's width.\n   * @param {Number} height - The rectangle's height.\n   * @param {Number} radius - The rounded amount (in pixels) for the four corners.\n   * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n   */\n  roundedRect: function (ctx, x, y, width, height, radius) {\n    if (radius) {\n      // NOTE(SB) `epsilon` helps to prevent minor artifacts appearing\n      // on Chrome when `r` is exactly half the height or the width.\n      var epsilon = 0.0000001;\n      var r = Math.min(radius, height / 2 - epsilon, width / 2 - epsilon);\n      ctx.moveTo(x + r, y);\n      ctx.lineTo(x + width - r, y);\n      ctx.arcTo(x + width, y, x + width, y + r, r);\n      ctx.lineTo(x + width, y + height - r);\n      ctx.arcTo(x + width, y + height, x + width - r, y + height, r);\n      ctx.lineTo(x + r, y + height);\n      ctx.arcTo(x, y + height, x, y + height - r, r);\n      ctx.lineTo(x, y + r);\n      ctx.arcTo(x, y, x + r, y, r);\n      ctx.closePath();\n      ctx.moveTo(x, y);\n    } else {\n      ctx.rect(x, y, width, height);\n    }\n  },\n  drawPoint: function (ctx, style, radius, x, y, rotation) {\n    var type, edgeLength, xOffset, yOffset, height, size;\n    rotation = rotation || 0;\n\n    if (style && typeof style === 'object') {\n      type = style.toString();\n\n      if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n        ctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);\n        return;\n      }\n    }\n\n    if (isNaN(radius) || radius <= 0) {\n      return;\n    }\n\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(rotation * Math.PI / 180);\n    ctx.beginPath();\n\n    switch (style) {\n      // Default includes circle\n      default:\n        ctx.arc(0, 0, radius, 0, Math.PI * 2);\n        ctx.closePath();\n        break;\n\n      case 'triangle':\n        edgeLength = 3 * radius / Math.sqrt(3);\n        height = edgeLength * Math.sqrt(3) / 2;\n        ctx.moveTo(-edgeLength / 2, height / 3);\n        ctx.lineTo(edgeLength / 2, height / 3);\n        ctx.lineTo(0, -2 * height / 3);\n        ctx.closePath();\n        break;\n\n      case 'rect':\n        size = 1 / Math.SQRT2 * radius;\n        ctx.rect(-size, -size, 2 * size, 2 * size);\n        break;\n\n      case 'rectRounded':\n        var offset = radius / Math.SQRT2;\n        var leftX = -offset;\n        var topY = -offset;\n        var sideSize = Math.SQRT2 * radius; // NOTE(SB) the rounded rect implementation changed to use `arcTo`\n        // instead of `quadraticCurveTo` since it generates better results\n        // when rect is almost a circle. 0.425 (instead of 0.5) produces\n        // results visually closer to the previous impl.\n\n        this.roundedRect(ctx, leftX, topY, sideSize, sideSize, radius * 0.425);\n        break;\n\n      case 'rectRot':\n        size = 1 / Math.SQRT2 * radius;\n        ctx.moveTo(-size, 0);\n        ctx.lineTo(0, size);\n        ctx.lineTo(size, 0);\n        ctx.lineTo(0, -size);\n        ctx.closePath();\n        break;\n\n      case 'cross':\n        ctx.moveTo(0, radius);\n        ctx.lineTo(0, -radius);\n        ctx.moveTo(-radius, 0);\n        ctx.lineTo(radius, 0);\n        break;\n\n      case 'crossRot':\n        xOffset = Math.cos(Math.PI / 4) * radius;\n        yOffset = Math.sin(Math.PI / 4) * radius;\n        ctx.moveTo(-xOffset, -yOffset);\n        ctx.lineTo(xOffset, yOffset);\n        ctx.moveTo(-xOffset, yOffset);\n        ctx.lineTo(xOffset, -yOffset);\n        break;\n\n      case 'star':\n        ctx.moveTo(0, radius);\n        ctx.lineTo(0, -radius);\n        ctx.moveTo(-radius, 0);\n        ctx.lineTo(radius, 0);\n        xOffset = Math.cos(Math.PI / 4) * radius;\n        yOffset = Math.sin(Math.PI / 4) * radius;\n        ctx.moveTo(-xOffset, -yOffset);\n        ctx.lineTo(xOffset, yOffset);\n        ctx.moveTo(-xOffset, yOffset);\n        ctx.lineTo(xOffset, -yOffset);\n        break;\n\n      case 'line':\n        ctx.moveTo(-radius, 0);\n        ctx.lineTo(radius, 0);\n        break;\n\n      case 'dash':\n        ctx.moveTo(0, 0);\n        ctx.lineTo(radius, 0);\n        break;\n    }\n\n    ctx.fill();\n    ctx.stroke();\n    ctx.restore();\n  },\n  clipArea: function (ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n  },\n  unclipArea: function (ctx) {\n    ctx.restore();\n  },\n  lineTo: function (ctx, previous, target, flip) {\n    if (target.steppedLine) {\n      if (target.steppedLine === 'after' && !flip || target.steppedLine !== 'after' && flip) {\n        ctx.lineTo(previous.x, target.y);\n      } else {\n        ctx.lineTo(target.x, previous.y);\n      }\n\n      ctx.lineTo(target.x, target.y);\n      return;\n    }\n\n    if (!target.tension) {\n      ctx.lineTo(target.x, target.y);\n      return;\n    }\n\n    ctx.bezierCurveTo(flip ? previous.controlPointPreviousX : previous.controlPointNextX, flip ? previous.controlPointPreviousY : previous.controlPointNextY, flip ? target.controlPointNextX : target.controlPointPreviousX, flip ? target.controlPointNextY : target.controlPointPreviousY, target.x, target.y);\n  }\n}; // DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n * @namespace Chart.helpers.clear\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\n\nhelpers.clear = exports.clear;\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n * @namespace Chart.helpers.drawRoundedRectangle\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\n\nhelpers.drawRoundedRectangle = function (ctx) {\n  ctx.beginPath();\n  exports.roundedRect.apply(exports, arguments);\n};","map":{"version":3,"sources":["C:/Users/Administrator/.git/asdf/Source Files/node_modules/chart.js/src/helpers/helpers.canvas.js"],"names":["helpers","require","exports","module","clear","chart","ctx","clearRect","width","height","roundedRect","x","y","radius","epsilon","r","Math","min","moveTo","lineTo","arcTo","closePath","rect","drawPoint","style","rotation","type","edgeLength","xOffset","yOffset","size","toString","drawImage","isNaN","save","translate","rotate","PI","beginPath","arc","sqrt","SQRT2","offset","leftX","topY","sideSize","cos","sin","fill","stroke","restore","clipArea","area","left","top","right","bottom","clip","unclipArea","previous","target","flip","steppedLine","tension","bezierCurveTo","controlPointPreviousX","controlPointNextX","controlPointPreviousY","controlPointNextY","drawRoundedRectangle","apply","arguments"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAArB;AAEA;AACA;AACA;;;AACA,IAAIC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB;AAC9B;AACD;AACA;AACA;AACCE,EAAAA,KAAK,EAAE,UAASC,KAAT,EAAgB;AACtBA,IAAAA,KAAK,CAACC,GAAN,CAAUC,SAAV,CAAoB,CAApB,EAAuB,CAAvB,EAA0BF,KAAK,CAACG,KAAhC,EAAuCH,KAAK,CAACI,MAA7C;AACA,GAP6B;;AAS9B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCC,EAAAA,WAAW,EAAE,UAASJ,GAAT,EAAcK,CAAd,EAAiBC,CAAjB,EAAoBJ,KAApB,EAA2BC,MAA3B,EAAmCI,MAAnC,EAA2C;AACvD,QAAIA,MAAJ,EAAY;AACX;AACA;AACA,UAAIC,OAAO,GAAG,SAAd;AACA,UAAIC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASJ,MAAT,EAAkBJ,MAAM,GAAG,CAAV,GAAeK,OAAhC,EAA0CN,KAAK,GAAG,CAAT,GAAcM,OAAvD,CAAR;AAEAR,MAAAA,GAAG,CAACY,MAAJ,CAAWP,CAAC,GAAGI,CAAf,EAAkBH,CAAlB;AACAN,MAAAA,GAAG,CAACa,MAAJ,CAAWR,CAAC,GAAGH,KAAJ,GAAYO,CAAvB,EAA0BH,CAA1B;AACAN,MAAAA,GAAG,CAACc,KAAJ,CAAUT,CAAC,GAAGH,KAAd,EAAqBI,CAArB,EAAwBD,CAAC,GAAGH,KAA5B,EAAmCI,CAAC,GAAGG,CAAvC,EAA0CA,CAA1C;AACAT,MAAAA,GAAG,CAACa,MAAJ,CAAWR,CAAC,GAAGH,KAAf,EAAsBI,CAAC,GAAGH,MAAJ,GAAaM,CAAnC;AACAT,MAAAA,GAAG,CAACc,KAAJ,CAAUT,CAAC,GAAGH,KAAd,EAAqBI,CAAC,GAAGH,MAAzB,EAAiCE,CAAC,GAAGH,KAAJ,GAAYO,CAA7C,EAAgDH,CAAC,GAAGH,MAApD,EAA4DM,CAA5D;AACAT,MAAAA,GAAG,CAACa,MAAJ,CAAWR,CAAC,GAAGI,CAAf,EAAkBH,CAAC,GAAGH,MAAtB;AACAH,MAAAA,GAAG,CAACc,KAAJ,CAAUT,CAAV,EAAaC,CAAC,GAAGH,MAAjB,EAAyBE,CAAzB,EAA4BC,CAAC,GAAGH,MAAJ,GAAaM,CAAzC,EAA4CA,CAA5C;AACAT,MAAAA,GAAG,CAACa,MAAJ,CAAWR,CAAX,EAAcC,CAAC,GAAGG,CAAlB;AACAT,MAAAA,GAAG,CAACc,KAAJ,CAAUT,CAAV,EAAaC,CAAb,EAAgBD,CAAC,GAAGI,CAApB,EAAuBH,CAAvB,EAA0BG,CAA1B;AACAT,MAAAA,GAAG,CAACe,SAAJ;AACAf,MAAAA,GAAG,CAACY,MAAJ,CAAWP,CAAX,EAAcC,CAAd;AACA,KAjBD,MAiBO;AACNN,MAAAA,GAAG,CAACgB,IAAJ,CAASX,CAAT,EAAYC,CAAZ,EAAeJ,KAAf,EAAsBC,MAAtB;AACA;AACD,GAzC6B;AA2C9Bc,EAAAA,SAAS,EAAE,UAASjB,GAAT,EAAckB,KAAd,EAAqBX,MAArB,EAA6BF,CAA7B,EAAgCC,CAAhC,EAAmCa,QAAnC,EAA6C;AACvD,QAAIC,IAAJ,EAAUC,UAAV,EAAsBC,OAAtB,EAA+BC,OAA/B,EAAwCpB,MAAxC,EAAgDqB,IAAhD;AACAL,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,CAAvB;;AAEA,QAAID,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA9B,EAAwC;AACvCE,MAAAA,IAAI,GAAGF,KAAK,CAACO,QAAN,EAAP;;AACA,UAAIL,IAAI,KAAK,2BAAT,IAAwCA,IAAI,KAAK,4BAArD,EAAmF;AAClFpB,QAAAA,GAAG,CAAC0B,SAAJ,CAAcR,KAAd,EAAqBb,CAAC,GAAGa,KAAK,CAAChB,KAAN,GAAc,CAAvC,EAA0CI,CAAC,GAAGY,KAAK,CAACf,MAAN,GAAe,CAA7D,EAAgEe,KAAK,CAAChB,KAAtE,EAA6EgB,KAAK,CAACf,MAAnF;AACA;AACA;AACD;;AAED,QAAIwB,KAAK,CAACpB,MAAD,CAAL,IAAiBA,MAAM,IAAI,CAA/B,EAAkC;AACjC;AACA;;AAEDP,IAAAA,GAAG,CAAC4B,IAAJ;AACA5B,IAAAA,GAAG,CAAC6B,SAAJ,CAAcxB,CAAd,EAAiBC,CAAjB;AACAN,IAAAA,GAAG,CAAC8B,MAAJ,CAAWX,QAAQ,GAAGT,IAAI,CAACqB,EAAhB,GAAqB,GAAhC;AACA/B,IAAAA,GAAG,CAACgC,SAAJ;;AAEA,YAAQd,KAAR;AACA;AACA;AACClB,QAAAA,GAAG,CAACiC,GAAJ,CAAQ,CAAR,EAAW,CAAX,EAAc1B,MAAd,EAAsB,CAAtB,EAAyBG,IAAI,CAACqB,EAAL,GAAU,CAAnC;AACA/B,QAAAA,GAAG,CAACe,SAAJ;AACA;;AACD,WAAK,UAAL;AACCM,QAAAA,UAAU,GAAG,IAAId,MAAJ,GAAaG,IAAI,CAACwB,IAAL,CAAU,CAAV,CAA1B;AACA/B,QAAAA,MAAM,GAAGkB,UAAU,GAAGX,IAAI,CAACwB,IAAL,CAAU,CAAV,CAAb,GAA4B,CAArC;AACAlC,QAAAA,GAAG,CAACY,MAAJ,CAAW,CAACS,UAAD,GAAc,CAAzB,EAA4BlB,MAAM,GAAG,CAArC;AACAH,QAAAA,GAAG,CAACa,MAAJ,CAAWQ,UAAU,GAAG,CAAxB,EAA2BlB,MAAM,GAAG,CAApC;AACAH,QAAAA,GAAG,CAACa,MAAJ,CAAW,CAAX,EAAc,CAAC,CAAD,GAAKV,MAAL,GAAc,CAA5B;AACAH,QAAAA,GAAG,CAACe,SAAJ;AACA;;AACD,WAAK,MAAL;AACCS,QAAAA,IAAI,GAAG,IAAId,IAAI,CAACyB,KAAT,GAAiB5B,MAAxB;AACAP,QAAAA,GAAG,CAACgB,IAAJ,CAAS,CAACQ,IAAV,EAAgB,CAACA,IAAjB,EAAuB,IAAIA,IAA3B,EAAiC,IAAIA,IAArC;AACA;;AACD,WAAK,aAAL;AACC,YAAIY,MAAM,GAAG7B,MAAM,GAAGG,IAAI,CAACyB,KAA3B;AACA,YAAIE,KAAK,GAAG,CAACD,MAAb;AACA,YAAIE,IAAI,GAAG,CAACF,MAAZ;AACA,YAAIG,QAAQ,GAAG7B,IAAI,CAACyB,KAAL,GAAa5B,MAA5B,CAJD,CAMC;AACA;AACA;AACA;;AACA,aAAKH,WAAL,CAAiBJ,GAAjB,EAAsBqC,KAAtB,EAA6BC,IAA7B,EAAmCC,QAAnC,EAA6CA,QAA7C,EAAuDhC,MAAM,GAAG,KAAhE;AACA;;AACD,WAAK,SAAL;AACCiB,QAAAA,IAAI,GAAG,IAAId,IAAI,CAACyB,KAAT,GAAiB5B,MAAxB;AACAP,QAAAA,GAAG,CAACY,MAAJ,CAAW,CAACY,IAAZ,EAAkB,CAAlB;AACAxB,QAAAA,GAAG,CAACa,MAAJ,CAAW,CAAX,EAAcW,IAAd;AACAxB,QAAAA,GAAG,CAACa,MAAJ,CAAWW,IAAX,EAAiB,CAAjB;AACAxB,QAAAA,GAAG,CAACa,MAAJ,CAAW,CAAX,EAAc,CAACW,IAAf;AACAxB,QAAAA,GAAG,CAACe,SAAJ;AACA;;AACD,WAAK,OAAL;AACCf,QAAAA,GAAG,CAACY,MAAJ,CAAW,CAAX,EAAcL,MAAd;AACAP,QAAAA,GAAG,CAACa,MAAJ,CAAW,CAAX,EAAc,CAACN,MAAf;AACAP,QAAAA,GAAG,CAACY,MAAJ,CAAW,CAACL,MAAZ,EAAoB,CAApB;AACAP,QAAAA,GAAG,CAACa,MAAJ,CAAWN,MAAX,EAAmB,CAAnB;AACA;;AACD,WAAK,UAAL;AACCe,QAAAA,OAAO,GAAGZ,IAAI,CAAC8B,GAAL,CAAS9B,IAAI,CAACqB,EAAL,GAAU,CAAnB,IAAwBxB,MAAlC;AACAgB,QAAAA,OAAO,GAAGb,IAAI,CAAC+B,GAAL,CAAS/B,IAAI,CAACqB,EAAL,GAAU,CAAnB,IAAwBxB,MAAlC;AACAP,QAAAA,GAAG,CAACY,MAAJ,CAAW,CAACU,OAAZ,EAAqB,CAACC,OAAtB;AACAvB,QAAAA,GAAG,CAACa,MAAJ,CAAWS,OAAX,EAAoBC,OAApB;AACAvB,QAAAA,GAAG,CAACY,MAAJ,CAAW,CAACU,OAAZ,EAAqBC,OAArB;AACAvB,QAAAA,GAAG,CAACa,MAAJ,CAAWS,OAAX,EAAoB,CAACC,OAArB;AACA;;AACD,WAAK,MAAL;AACCvB,QAAAA,GAAG,CAACY,MAAJ,CAAW,CAAX,EAAcL,MAAd;AACAP,QAAAA,GAAG,CAACa,MAAJ,CAAW,CAAX,EAAc,CAACN,MAAf;AACAP,QAAAA,GAAG,CAACY,MAAJ,CAAW,CAACL,MAAZ,EAAoB,CAApB;AACAP,QAAAA,GAAG,CAACa,MAAJ,CAAWN,MAAX,EAAmB,CAAnB;AACAe,QAAAA,OAAO,GAAGZ,IAAI,CAAC8B,GAAL,CAAS9B,IAAI,CAACqB,EAAL,GAAU,CAAnB,IAAwBxB,MAAlC;AACAgB,QAAAA,OAAO,GAAGb,IAAI,CAAC+B,GAAL,CAAS/B,IAAI,CAACqB,EAAL,GAAU,CAAnB,IAAwBxB,MAAlC;AACAP,QAAAA,GAAG,CAACY,MAAJ,CAAW,CAACU,OAAZ,EAAqB,CAACC,OAAtB;AACAvB,QAAAA,GAAG,CAACa,MAAJ,CAAWS,OAAX,EAAoBC,OAApB;AACAvB,QAAAA,GAAG,CAACY,MAAJ,CAAW,CAACU,OAAZ,EAAqBC,OAArB;AACAvB,QAAAA,GAAG,CAACa,MAAJ,CAAWS,OAAX,EAAoB,CAACC,OAArB;AACA;;AACD,WAAK,MAAL;AACCvB,QAAAA,GAAG,CAACY,MAAJ,CAAW,CAACL,MAAZ,EAAoB,CAApB;AACAP,QAAAA,GAAG,CAACa,MAAJ,CAAWN,MAAX,EAAmB,CAAnB;AACA;;AACD,WAAK,MAAL;AACCP,QAAAA,GAAG,CAACY,MAAJ,CAAW,CAAX,EAAc,CAAd;AACAZ,QAAAA,GAAG,CAACa,MAAJ,CAAWN,MAAX,EAAmB,CAAnB;AACA;AAvED;;AA0EAP,IAAAA,GAAG,CAAC0C,IAAJ;AACA1C,IAAAA,GAAG,CAAC2C,MAAJ;AACA3C,IAAAA,GAAG,CAAC4C,OAAJ;AACA,GA7I6B;AA+I9BC,EAAAA,QAAQ,EAAE,UAAS7C,GAAT,EAAc8C,IAAd,EAAoB;AAC7B9C,IAAAA,GAAG,CAAC4B,IAAJ;AACA5B,IAAAA,GAAG,CAACgC,SAAJ;AACAhC,IAAAA,GAAG,CAACgB,IAAJ,CAAS8B,IAAI,CAACC,IAAd,EAAoBD,IAAI,CAACE,GAAzB,EAA8BF,IAAI,CAACG,KAAL,GAAaH,IAAI,CAACC,IAAhD,EAAsDD,IAAI,CAACI,MAAL,GAAcJ,IAAI,CAACE,GAAzE;AACAhD,IAAAA,GAAG,CAACmD,IAAJ;AACA,GApJ6B;AAsJ9BC,EAAAA,UAAU,EAAE,UAASpD,GAAT,EAAc;AACzBA,IAAAA,GAAG,CAAC4C,OAAJ;AACA,GAxJ6B;AA0J9B/B,EAAAA,MAAM,EAAE,UAASb,GAAT,EAAcqD,QAAd,EAAwBC,MAAxB,EAAgCC,IAAhC,EAAsC;AAC7C,QAAID,MAAM,CAACE,WAAX,EAAwB;AACvB,UAAKF,MAAM,CAACE,WAAP,KAAuB,OAAvB,IAAkC,CAACD,IAApC,IAA8CD,MAAM,CAACE,WAAP,KAAuB,OAAvB,IAAkCD,IAApF,EAA2F;AAC1FvD,QAAAA,GAAG,CAACa,MAAJ,CAAWwC,QAAQ,CAAChD,CAApB,EAAuBiD,MAAM,CAAChD,CAA9B;AACA,OAFD,MAEO;AACNN,QAAAA,GAAG,CAACa,MAAJ,CAAWyC,MAAM,CAACjD,CAAlB,EAAqBgD,QAAQ,CAAC/C,CAA9B;AACA;;AACDN,MAAAA,GAAG,CAACa,MAAJ,CAAWyC,MAAM,CAACjD,CAAlB,EAAqBiD,MAAM,CAAChD,CAA5B;AACA;AACA;;AAED,QAAI,CAACgD,MAAM,CAACG,OAAZ,EAAqB;AACpBzD,MAAAA,GAAG,CAACa,MAAJ,CAAWyC,MAAM,CAACjD,CAAlB,EAAqBiD,MAAM,CAAChD,CAA5B;AACA;AACA;;AAEDN,IAAAA,GAAG,CAAC0D,aAAJ,CACCH,IAAI,GAAGF,QAAQ,CAACM,qBAAZ,GAAoCN,QAAQ,CAACO,iBADlD,EAECL,IAAI,GAAGF,QAAQ,CAACQ,qBAAZ,GAAoCR,QAAQ,CAACS,iBAFlD,EAGCP,IAAI,GAAGD,MAAM,CAACM,iBAAV,GAA8BN,MAAM,CAACK,qBAH1C,EAICJ,IAAI,GAAGD,MAAM,CAACQ,iBAAV,GAA8BR,MAAM,CAACO,qBAJ1C,EAKCP,MAAM,CAACjD,CALR,EAMCiD,MAAM,CAAChD,CANR;AAOA;AAjL6B,CAA/B,C,CAoLA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAZ,OAAO,CAACI,KAAR,GAAgBF,OAAO,CAACE,KAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,OAAO,CAACqE,oBAAR,GAA+B,UAAS/D,GAAT,EAAc;AAC5CA,EAAAA,GAAG,CAACgC,SAAJ;AACApC,EAAAA,OAAO,CAACQ,WAAR,CAAoB4D,KAApB,CAA0BpE,OAA1B,EAAmCqE,SAAnC;AACA,CAHD","sourcesContent":["'use strict';\n\nvar helpers = require('./helpers.core');\n\n/**\n * @namespace Chart.helpers.canvas\n */\nvar exports = module.exports = {\n\t/**\n\t * Clears the entire canvas associated to the given `chart`.\n\t * @param {Chart} chart - The chart for which to clear the canvas.\n\t */\n\tclear: function(chart) {\n\t\tchart.ctx.clearRect(0, 0, chart.width, chart.height);\n\t},\n\n\t/**\n\t * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n\t * given size (width, height) and the same `radius` for all corners.\n\t * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n\t * @param {Number} x - The x axis of the coordinate for the rectangle starting point.\n\t * @param {Number} y - The y axis of the coordinate for the rectangle starting point.\n\t * @param {Number} width - The rectangle's width.\n\t * @param {Number} height - The rectangle's height.\n\t * @param {Number} radius - The rounded amount (in pixels) for the four corners.\n\t * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n\t */\n\troundedRect: function(ctx, x, y, width, height, radius) {\n\t\tif (radius) {\n\t\t\t// NOTE(SB) `epsilon` helps to prevent minor artifacts appearing\n\t\t\t// on Chrome when `r` is exactly half the height or the width.\n\t\t\tvar epsilon = 0.0000001;\n\t\t\tvar r = Math.min(radius, (height / 2) - epsilon, (width / 2) - epsilon);\n\n\t\t\tctx.moveTo(x + r, y);\n\t\t\tctx.lineTo(x + width - r, y);\n\t\t\tctx.arcTo(x + width, y, x + width, y + r, r);\n\t\t\tctx.lineTo(x + width, y + height - r);\n\t\t\tctx.arcTo(x + width, y + height, x + width - r, y + height, r);\n\t\t\tctx.lineTo(x + r, y + height);\n\t\t\tctx.arcTo(x, y + height, x, y + height - r, r);\n\t\t\tctx.lineTo(x, y + r);\n\t\t\tctx.arcTo(x, y, x + r, y, r);\n\t\t\tctx.closePath();\n\t\t\tctx.moveTo(x, y);\n\t\t} else {\n\t\t\tctx.rect(x, y, width, height);\n\t\t}\n\t},\n\n\tdrawPoint: function(ctx, style, radius, x, y, rotation) {\n\t\tvar type, edgeLength, xOffset, yOffset, height, size;\n\t\trotation = rotation || 0;\n\n\t\tif (style && typeof style === 'object') {\n\t\t\ttype = style.toString();\n\t\t\tif (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n\t\t\t\tctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (isNaN(radius) || radius <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tctx.save();\n\t\tctx.translate(x, y);\n\t\tctx.rotate(rotation * Math.PI / 180);\n\t\tctx.beginPath();\n\n\t\tswitch (style) {\n\t\t// Default includes circle\n\t\tdefault:\n\t\t\tctx.arc(0, 0, radius, 0, Math.PI * 2);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'triangle':\n\t\t\tedgeLength = 3 * radius / Math.sqrt(3);\n\t\t\theight = edgeLength * Math.sqrt(3) / 2;\n\t\t\tctx.moveTo(-edgeLength / 2, height / 3);\n\t\t\tctx.lineTo(edgeLength / 2, height / 3);\n\t\t\tctx.lineTo(0, -2 * height / 3);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'rect':\n\t\t\tsize = 1 / Math.SQRT2 * radius;\n\t\t\tctx.rect(-size, -size, 2 * size, 2 * size);\n\t\t\tbreak;\n\t\tcase 'rectRounded':\n\t\t\tvar offset = radius / Math.SQRT2;\n\t\t\tvar leftX = -offset;\n\t\t\tvar topY = -offset;\n\t\t\tvar sideSize = Math.SQRT2 * radius;\n\n\t\t\t// NOTE(SB) the rounded rect implementation changed to use `arcTo`\n\t\t\t// instead of `quadraticCurveTo` since it generates better results\n\t\t\t// when rect is almost a circle. 0.425 (instead of 0.5) produces\n\t\t\t// results visually closer to the previous impl.\n\t\t\tthis.roundedRect(ctx, leftX, topY, sideSize, sideSize, radius * 0.425);\n\t\t\tbreak;\n\t\tcase 'rectRot':\n\t\t\tsize = 1 / Math.SQRT2 * radius;\n\t\t\tctx.moveTo(-size, 0);\n\t\t\tctx.lineTo(0, size);\n\t\t\tctx.lineTo(size, 0);\n\t\t\tctx.lineTo(0, -size);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'cross':\n\t\t\tctx.moveTo(0, radius);\n\t\t\tctx.lineTo(0, -radius);\n\t\t\tctx.moveTo(-radius, 0);\n\t\t\tctx.lineTo(radius, 0);\n\t\t\tbreak;\n\t\tcase 'crossRot':\n\t\t\txOffset = Math.cos(Math.PI / 4) * radius;\n\t\t\tyOffset = Math.sin(Math.PI / 4) * radius;\n\t\t\tctx.moveTo(-xOffset, -yOffset);\n\t\t\tctx.lineTo(xOffset, yOffset);\n\t\t\tctx.moveTo(-xOffset, yOffset);\n\t\t\tctx.lineTo(xOffset, -yOffset);\n\t\t\tbreak;\n\t\tcase 'star':\n\t\t\tctx.moveTo(0, radius);\n\t\t\tctx.lineTo(0, -radius);\n\t\t\tctx.moveTo(-radius, 0);\n\t\t\tctx.lineTo(radius, 0);\n\t\t\txOffset = Math.cos(Math.PI / 4) * radius;\n\t\t\tyOffset = Math.sin(Math.PI / 4) * radius;\n\t\t\tctx.moveTo(-xOffset, -yOffset);\n\t\t\tctx.lineTo(xOffset, yOffset);\n\t\t\tctx.moveTo(-xOffset, yOffset);\n\t\t\tctx.lineTo(xOffset, -yOffset);\n\t\t\tbreak;\n\t\tcase 'line':\n\t\t\tctx.moveTo(-radius, 0);\n\t\t\tctx.lineTo(radius, 0);\n\t\t\tbreak;\n\t\tcase 'dash':\n\t\t\tctx.moveTo(0, 0);\n\t\t\tctx.lineTo(radius, 0);\n\t\t\tbreak;\n\t\t}\n\n\t\tctx.fill();\n\t\tctx.stroke();\n\t\tctx.restore();\n\t},\n\n\tclipArea: function(ctx, area) {\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n\t\tctx.clip();\n\t},\n\n\tunclipArea: function(ctx) {\n\t\tctx.restore();\n\t},\n\n\tlineTo: function(ctx, previous, target, flip) {\n\t\tif (target.steppedLine) {\n\t\t\tif ((target.steppedLine === 'after' && !flip) || (target.steppedLine !== 'after' && flip)) {\n\t\t\t\tctx.lineTo(previous.x, target.y);\n\t\t\t} else {\n\t\t\t\tctx.lineTo(target.x, previous.y);\n\t\t\t}\n\t\t\tctx.lineTo(target.x, target.y);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!target.tension) {\n\t\t\tctx.lineTo(target.x, target.y);\n\t\t\treturn;\n\t\t}\n\n\t\tctx.bezierCurveTo(\n\t\t\tflip ? previous.controlPointPreviousX : previous.controlPointNextX,\n\t\t\tflip ? previous.controlPointPreviousY : previous.controlPointNextY,\n\t\t\tflip ? target.controlPointNextX : target.controlPointPreviousX,\n\t\t\tflip ? target.controlPointNextY : target.controlPointPreviousY,\n\t\t\ttarget.x,\n\t\t\ttarget.y);\n\t}\n};\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n * @namespace Chart.helpers.clear\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.clear = exports.clear;\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n * @namespace Chart.helpers.drawRoundedRectangle\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.drawRoundedRectangle = function(ctx) {\n\tctx.beginPath();\n\texports.roundedRect.apply(exports, arguments);\n};\n"]},"metadata":{},"sourceType":"script"}