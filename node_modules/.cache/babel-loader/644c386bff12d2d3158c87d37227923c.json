{"ast":null,"code":"/**\n * Takes an argument and if it's an array, returns the first item in the array,\n * otherwise returns the argument. Used for Preact compatibility.\n */\nexport var unwrapArray = function unwrapArray(arg) {\n  return Array.isArray(arg) ? arg[0] : arg;\n};\n/**\n * Takes a maybe-undefined function and arbitrary args and invokes the function\n * only if it is defined.\n */\n\nexport var safeInvoke = function safeInvoke(fn) {\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (typeof fn === \"function\") {\n    return fn.apply(undefined, args);\n  }\n};","map":{"version":3,"sources":["C:/Users/Administrator/.git/asdf/Source Files/node_modules/react-popper/lib/esm/utils.js"],"names":["unwrapArray","arg","Array","isArray","safeInvoke","fn","_len","arguments","length","args","_key","apply","undefined"],"mappings":"AAEA;AACA;AACA;AACA;AACA,OAAO,IAAIA,WAAW,GAAG,SAASA,WAAT,CAAqBC,GAArB,EAA0B;AACjD,SAAOC,KAAK,CAACC,OAAN,CAAcF,GAAd,IAAqBA,GAAG,CAAC,CAAD,CAAxB,GAA8BA,GAArC;AACD,CAFM;AAIP;AACA;AACA;AACA;;AACA,OAAO,IAAIG,UAAU,GAAG,SAASA,UAAT,CAAoBC,EAApB,EAAwB;AAC9C,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAGP,KAAK,CAACI,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAvB,CAAzC,EAAoEI,IAAI,GAAG,CAAhF,EAAmFA,IAAI,GAAGJ,IAA1F,EAAgGI,IAAI,EAApG,EAAwG;AACtGD,IAAAA,IAAI,CAACC,IAAI,GAAG,CAAR,CAAJ,GAAiBH,SAAS,CAACG,IAAD,CAA1B;AACD;;AAED,MAAI,OAAOL,EAAP,KAAc,UAAlB,EAA8B;AAC5B,WAAOA,EAAE,CAACM,KAAH,CAASC,SAAT,EAAoBH,IAApB,CAAP;AACD;AACF,CARM","sourcesContent":["\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array,\n * otherwise returns the argument. Used for Preact compatibility.\n */\nexport var unwrapArray = function unwrapArray(arg) {\n  return Array.isArray(arg) ? arg[0] : arg;\n};\n\n/**\n * Takes a maybe-undefined function and arbitrary args and invokes the function\n * only if it is defined.\n */\nexport var safeInvoke = function safeInvoke(fn) {\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (typeof fn === \"function\") {\n    return fn.apply(undefined, args);\n  }\n};"]},"metadata":{},"sourceType":"module"}