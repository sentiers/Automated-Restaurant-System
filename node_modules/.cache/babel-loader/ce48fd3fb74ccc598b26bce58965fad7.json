{"ast":null,"code":"'use strict';\n\nvar defaults = require('./core.defaults');\n\nvar helpers = require('../helpers/index');\n\nvar layouts = require('./core.layouts');\n\nmodule.exports = {\n  // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n  // use the new chart options to grab the correct scale\n  constructors: {},\n  // Use a registration function so that we can move to an ES6 map when we no longer need to support\n  // old browsers\n  // Scale config defaults\n  defaults: {},\n  registerScaleType: function (type, scaleConstructor, scaleDefaults) {\n    this.constructors[type] = scaleConstructor;\n    this.defaults[type] = helpers.clone(scaleDefaults);\n  },\n  getScaleConstructor: function (type) {\n    return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n  },\n  getScaleDefaults: function (type) {\n    // Return the scale defaults merged with the global settings so that we always use the latest ones\n    return this.defaults.hasOwnProperty(type) ? helpers.merge({}, [defaults.scale, this.defaults[type]]) : {};\n  },\n  updateScaleDefaults: function (type, additions) {\n    var me = this;\n\n    if (me.defaults.hasOwnProperty(type)) {\n      me.defaults[type] = helpers.extend(me.defaults[type], additions);\n    }\n  },\n  addScalesToLayout: function (chart) {\n    // Adds each scale to the chart.boxes array to be sized accordingly\n    helpers.each(chart.scales, function (scale) {\n      // Set ILayoutItem parameters for backwards compatibility\n      scale.fullWidth = scale.options.fullWidth;\n      scale.position = scale.options.position;\n      scale.weight = scale.options.weight;\n      layouts.addBox(chart, scale);\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Administrator/.git/asdf/Source Files/node_modules/chart.js/src/core/core.scaleService.js"],"names":["defaults","require","helpers","layouts","module","exports","constructors","registerScaleType","type","scaleConstructor","scaleDefaults","clone","getScaleConstructor","hasOwnProperty","undefined","getScaleDefaults","merge","scale","updateScaleDefaults","additions","me","extend","addScalesToLayout","chart","each","scales","fullWidth","options","position","weight","addBox"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,iBAAD,CAAtB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,gBAAD,CAArB;;AAEAG,MAAM,CAACC,OAAP,GAAiB;AAChB;AACA;AACAC,EAAAA,YAAY,EAAE,EAHE;AAIhB;AACA;AAEA;AACAN,EAAAA,QAAQ,EAAE,EARM;AAShBO,EAAAA,iBAAiB,EAAE,UAASC,IAAT,EAAeC,gBAAf,EAAiCC,aAAjC,EAAgD;AAClE,SAAKJ,YAAL,CAAkBE,IAAlB,IAA0BC,gBAA1B;AACA,SAAKT,QAAL,CAAcQ,IAAd,IAAsBN,OAAO,CAACS,KAAR,CAAcD,aAAd,CAAtB;AACA,GAZe;AAahBE,EAAAA,mBAAmB,EAAE,UAASJ,IAAT,EAAe;AACnC,WAAO,KAAKF,YAAL,CAAkBO,cAAlB,CAAiCL,IAAjC,IAAyC,KAAKF,YAAL,CAAkBE,IAAlB,CAAzC,GAAmEM,SAA1E;AACA,GAfe;AAgBhBC,EAAAA,gBAAgB,EAAE,UAASP,IAAT,EAAe;AAChC;AACA,WAAO,KAAKR,QAAL,CAAca,cAAd,CAA6BL,IAA7B,IAAqCN,OAAO,CAACc,KAAR,CAAc,EAAd,EAAkB,CAAChB,QAAQ,CAACiB,KAAV,EAAiB,KAAKjB,QAAL,CAAcQ,IAAd,CAAjB,CAAlB,CAArC,GAAgG,EAAvG;AACA,GAnBe;AAoBhBU,EAAAA,mBAAmB,EAAE,UAASV,IAAT,EAAeW,SAAf,EAA0B;AAC9C,QAAIC,EAAE,GAAG,IAAT;;AACA,QAAIA,EAAE,CAACpB,QAAH,CAAYa,cAAZ,CAA2BL,IAA3B,CAAJ,EAAsC;AACrCY,MAAAA,EAAE,CAACpB,QAAH,CAAYQ,IAAZ,IAAoBN,OAAO,CAACmB,MAAR,CAAeD,EAAE,CAACpB,QAAH,CAAYQ,IAAZ,CAAf,EAAkCW,SAAlC,CAApB;AACA;AACD,GAzBe;AA0BhBG,EAAAA,iBAAiB,EAAE,UAASC,KAAT,EAAgB;AAClC;AACArB,IAAAA,OAAO,CAACsB,IAAR,CAAaD,KAAK,CAACE,MAAnB,EAA2B,UAASR,KAAT,EAAgB;AAC1C;AACAA,MAAAA,KAAK,CAACS,SAAN,GAAkBT,KAAK,CAACU,OAAN,CAAcD,SAAhC;AACAT,MAAAA,KAAK,CAACW,QAAN,GAAiBX,KAAK,CAACU,OAAN,CAAcC,QAA/B;AACAX,MAAAA,KAAK,CAACY,MAAN,GAAeZ,KAAK,CAACU,OAAN,CAAcE,MAA7B;AACA1B,MAAAA,OAAO,CAAC2B,MAAR,CAAeP,KAAf,EAAsBN,KAAtB;AACA,KAND;AAOA;AAnCe,CAAjB","sourcesContent":["'use strict';\n\nvar defaults = require('./core.defaults');\nvar helpers = require('../helpers/index');\nvar layouts = require('./core.layouts');\n\nmodule.exports = {\n\t// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n\t// use the new chart options to grab the correct scale\n\tconstructors: {},\n\t// Use a registration function so that we can move to an ES6 map when we no longer need to support\n\t// old browsers\n\n\t// Scale config defaults\n\tdefaults: {},\n\tregisterScaleType: function(type, scaleConstructor, scaleDefaults) {\n\t\tthis.constructors[type] = scaleConstructor;\n\t\tthis.defaults[type] = helpers.clone(scaleDefaults);\n\t},\n\tgetScaleConstructor: function(type) {\n\t\treturn this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n\t},\n\tgetScaleDefaults: function(type) {\n\t\t// Return the scale defaults merged with the global settings so that we always use the latest ones\n\t\treturn this.defaults.hasOwnProperty(type) ? helpers.merge({}, [defaults.scale, this.defaults[type]]) : {};\n\t},\n\tupdateScaleDefaults: function(type, additions) {\n\t\tvar me = this;\n\t\tif (me.defaults.hasOwnProperty(type)) {\n\t\t\tme.defaults[type] = helpers.extend(me.defaults[type], additions);\n\t\t}\n\t},\n\taddScalesToLayout: function(chart) {\n\t\t// Adds each scale to the chart.boxes array to be sized accordingly\n\t\thelpers.each(chart.scales, function(scale) {\n\t\t\t// Set ILayoutItem parameters for backwards compatibility\n\t\t\tscale.fullWidth = scale.options.fullWidth;\n\t\t\tscale.position = scale.options.position;\n\t\t\tscale.weight = scale.options.weight;\n\t\t\tlayouts.addBox(chart, scale);\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}