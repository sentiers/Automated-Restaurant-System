{"ast":null,"code":"/**\r\n * Secure random string generator with custom alphabet.\r\n *\r\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\r\n * will not be secure.\r\n *\r\n * @param {generator} random The random bytes generator.\r\n * @param {string} alphabet Symbols to be used in new random string.\r\n * @param {size} size The number of symbols in new random string.\r\n *\r\n * @return {string} Random string.\r\n *\r\n * @example\r\n * const format = require('nanoid/format')\r\n *\r\n * function random (size) {\r\n *   const result = []\r\n *   for (let i = 0; i < size; i++) {\r\n *     result.push(randomByte())\r\n *   }\r\n *   return result\r\n * }\r\n *\r\n * format(random, \"abcdef\", 5) //=> \"fbaef\"\r\n *\r\n * @name format\r\n * @function\r\n */\nmodule.exports = function (random, alphabet, size) {\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  var step = Math.ceil(1.6 * mask * size / alphabet.length);\n  var id = '';\n\n  while (true) {\n    var bytes = random(step);\n\n    for (var i = 0; i < step; i++) {\n      var byte = bytes[i] & mask;\n\n      if (alphabet[byte]) {\n        id += alphabet[byte];\n        if (id.length === size) return id;\n      }\n    }\n  }\n};\n/**\r\n * @callback generator\r\n * @param {number} bytes The number of bytes to generate.\r\n * @return {number[]} Random bytes.\r\n */","map":null,"metadata":{},"sourceType":"script"}