{"ast":null,"code":"'use strict';\n\nvar alphabet = require('./alphabet');\n\nvar build = require('./build');\n\nvar isValid = require('./is-valid'); // if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\n\n\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n/**\r\n * Set the seed.\r\n * Highly recommended if you don't want people to try to figure out your id schema.\r\n * exposed as shortid.seed(int)\r\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\r\n */\n\nfunction seed(seedValue) {\n  alphabet.seed(seedValue);\n  return module.exports;\n}\n/**\r\n * Set the cluster worker or machine id\r\n * exposed as shortid.worker(int)\r\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\r\n * returns shortid module so it can be chained.\r\n */\n\n\nfunction worker(workerId) {\n  clusterWorkerId = workerId;\n  return module.exports;\n}\n/**\r\n *\r\n * sets new characters to use in the alphabet\r\n * returns the shuffled alphabet\r\n */\n\n\nfunction characters(newCharacters) {\n  if (newCharacters !== undefined) {\n    alphabet.characters(newCharacters);\n  }\n\n  return alphabet.shuffled();\n}\n/**\r\n * Generate unique id\r\n * Returns string id\r\n */\n\n\nfunction generate() {\n  return build(clusterWorkerId);\n} // Export all other functions as properties of the generate function\n\n\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;","map":null,"metadata":{},"sourceType":"script"}