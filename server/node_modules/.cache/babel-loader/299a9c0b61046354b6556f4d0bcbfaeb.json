{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar PropTypes = _interopRequireWildcard(require(\"prop-types\"));\n\nvar _addClass = _interopRequireDefault(require(\"dom-helpers/class/addClass\"));\n\nvar _removeClass = _interopRequireDefault(require(\"dom-helpers/class/removeClass\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Transition = _interopRequireDefault(require(\"./Transition\"));\n\nvar _PropTypes = require(\"./utils/PropTypes\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return (0, _addClass.default)(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return (0, _removeClass.default)(node, c);\n  });\n};\n\nvar propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, _Transition.default.propTypes, {\n  /**\r\n   * The animation classNames applied to the component as it enters, exits or has finished the transition.\r\n   * A single name can be provided and it will be suffixed for each stage: e.g.\r\n   *\r\n   * `classNames=\"fade\"` applies `fade-enter`, `fade-enter-active`, `fade-enter-done`,\r\n   * `fade-exit`, `fade-exit-active`, `fade-exit-done`, `fade-appear`, and `fade-appear-active`.\r\n   * Each individual classNames can also be specified independently like:\r\n   *\r\n   * ```js\r\n   * classNames={{\r\n   *  appear: 'my-appear',\r\n   *  appearActive: 'my-active-appear',\r\n   *  enter: 'my-enter',\r\n   *  enterActive: 'my-active-enter',\r\n   *  enterDone: 'my-done-enter',\r\n   *  exit: 'my-exit',\r\n   *  exitActive: 'my-active-exit',\r\n   *  exitDone: 'my-done-exit',\r\n   * }}\r\n   * ```\r\n   *\r\n   * If you want to set these classes using CSS Modules:\r\n   *\r\n   * ```js\r\n   * import styles from './styles.css';\r\n   * ```\r\n   *\r\n   * you might want to use camelCase in your CSS file, that way could simply spread\r\n   * them instead of listing them one by one:\r\n   *\r\n   * ```js\r\n   * classNames={{ ...styles }}\r\n   * ```\r\n   *\r\n   * @type {string | {\r\n   *  appear?: string,\r\n   *  appearActive?: string,\r\n   *  enter?: string,\r\n   *  enterActive?: string,\r\n   *  enterDone?: string,\r\n   *  exit?: string,\r\n   *  exitActive?: string,\r\n   *  exitDone?: string,\r\n   * }}\r\n   */\n  classNames: _PropTypes.classNamesShape,\n\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\r\n   * applied.\r\n   *\r\n   * @type Function(node: HtmlElement, isAppearing: bool)\r\n   */\n  onEnter: PropTypes.func,\n\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\r\n   * 'appear-active' class is applied.\r\n   *\r\n   * @type Function(node: HtmlElement, isAppearing: bool)\r\n   */\n  onEntering: PropTypes.func,\n\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'enter' or\r\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\r\n   *\r\n   * @type Function(node: HtmlElement, isAppearing: bool)\r\n   */\n  onEntered: PropTypes.func,\n\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'exit' class is\r\n   * applied.\r\n   *\r\n   * @type Function(node: HtmlElement)\r\n   */\n  onExit: PropTypes.func,\n\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\r\n   *\r\n   * @type Function(node: HtmlElement\r\n   */\n  onExiting: PropTypes.func,\n\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'exit' classes\r\n   * are **removed** and the `exit-done` class is added to the DOM node.\r\n   *\r\n   * @type Function(node: HtmlElement)\r\n   */\n  onExited: PropTypes.func\n}) : {};\n;\n/**\r\n * A `Transition` component using CSS transitions and animations.\r\n * It's inspired by the excellent [ng-animate](http://www.nganimate.org/) library.\r\n *\r\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\r\n * and `exit` stages of the transition. The first class is applied and then a\r\n * second \"active\" class in order to activate the css animation. After the animation,\r\n * matching `done` class names are applied to persist the animation state.\r\n *\r\n * When the `in` prop is toggled to `true` the Component will get\r\n * the `example-enter` CSS class and the `example-enter-active` CSS class\r\n * added in the next tick. This is a convention based on the `classNames` prop.\r\n */\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.onEnter = function (node, appearing) {\n      var _this$getClassNames = _this.getClassNames(appearing ? 'appear' : 'enter'),\n          className = _this$getClassNames.className;\n\n      _this.removeClasses(node, 'exit');\n\n      addClass(node, className);\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(node);\n      }\n    };\n\n    _this.onEntering = function (node, appearing) {\n      var _this$getClassNames2 = _this.getClassNames(appearing ? 'appear' : 'enter'),\n          activeClassName = _this$getClassNames2.activeClassName;\n\n      _this.reflowAndAddClass(node, activeClassName);\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(node);\n      }\n    };\n\n    _this.onEntered = function (node, appearing) {\n      var _this$getClassNames3 = _this.getClassNames('enter'),\n          doneClassName = _this$getClassNames3.doneClassName;\n\n      _this.removeClasses(node, appearing ? 'appear' : 'enter');\n\n      addClass(node, doneClassName);\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(node);\n      }\n    };\n\n    _this.onExit = function (node) {\n      var _this$getClassNames4 = _this.getClassNames('exit'),\n          className = _this$getClassNames4.className;\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      addClass(node, className);\n\n      if (_this.props.onExit) {\n        _this.props.onExit(node);\n      }\n    };\n\n    _this.onExiting = function (node) {\n      var _this$getClassNames5 = _this.getClassNames('exit'),\n          activeClassName = _this$getClassNames5.activeClassName;\n\n      _this.reflowAndAddClass(node, activeClassName);\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(node);\n      }\n    };\n\n    _this.onExited = function (node) {\n      var _this$getClassNames6 = _this.getClassNames('exit'),\n          doneClassName = _this$getClassNames6.doneClassName;\n\n      _this.removeClasses(node, 'exit');\n\n      addClass(node, doneClassName);\n\n      if (_this.props.onExited) {\n        _this.props.onExited(node);\n      }\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var className = typeof classNames !== 'string' ? classNames[type] : classNames + '-' + type;\n      var activeClassName = typeof classNames !== 'string' ? classNames[type + 'Active'] : className + '-active';\n      var doneClassName = typeof classNames !== 'string' ? classNames[type + 'Done'] : className + '-done';\n      return {\n        className: className,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$getClassNames7 = this.getClassNames(type),\n        className = _this$getClassNames7.className,\n        activeClassName = _this$getClassNames7.activeClassName,\n        doneClassName = _this$getClassNames7.doneClassName;\n\n    className && removeClass(node, className);\n    activeClassName && removeClass(node, activeClassName);\n    doneClassName && removeClass(node, doneClassName);\n  };\n\n  _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {\n    // This is for to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n    if (className) {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n      /* eslint-enable no-unused-expressions */\n\n      addClass(node, className);\n    }\n  };\n\n  _proto.render = function render() {\n    var props = _extends({}, this.props);\n\n    delete props.classNames;\n    return _react.default.createElement(_Transition.default, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(_react.default.Component);\n\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nvar _default = CSSTransition;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}